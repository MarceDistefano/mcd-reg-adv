modelos_ridge <- glmnet(x = , y = y, alpha = 0)
lm.comp <- lm(Employed ~., data = train)
lm.comp.pred <- predict(lm.comp, new_data = test)
lm.mse <- mean((lm.comp.pred - test$Employed)^2)
lm.mse
tmatrix <- x
ridge.pred = predict(modelos_ridge, s = cv_error_ridge$lambda.min, newx=tmatrix)
ridge.mse = mean((ridge.pred - longley$Employed)^2)
lasso.pred = predict(modelos_lasso, s = cv_error_lasso$lambda.min, newx=tmatrix)
lasso.mse = mean((lasso.pred - longley$Employed)^2)
enet.pred = predict(modelos_elastic_net, s = cv_error_elastic_net$lambda.min, newx=tmatrix)
enet.mse = mean((enet.pred - longley$Employed)^2)
names <- c("Full", "Ridge", "Lasso", "Elastic Net")
values <- c(lm.mse, ridge.mse, lasso.mse, enet.mse)
barplot(values,
names.arg = names,
main = "Mean Squared Error",
xlab = "Modelos",
ylab = "MSE",
col = "lightblue")
x <- model.matrix(Employed ~ ., data = longley)[, -1]
y <- longley$Employed
modelos_ridge <- glmnet(x = x, y = y, alpha = 0)
plot(modelos_ridge, xvar = "lambda", label = TRUE)
set.seed(1)
cv_error_ridge <- cv.glmnet(x = x, y = y, alpha = 0, nfolds = 10, type.measure = "mse")
plot(cv_error_ridge)
modelos_lasso <- glmnet(x = x, y = y, alpha = 1)
plot(modelos_lasso, xvar = "lambda", label = TRUE)
set.seed(1)
cv_error_lasso <- cv.glmnet(x = x, y = y, alpha = 1, nfolds = 10)
plot(cv_error_lasso)
modelos_elastic_net <- glmnet(x = x, y = y, alpha = 0.5)
plot(modelos_elastic_net, xvar = "lambda", label = TRUE)
set.seed(1)
cv_error_elastic_net <- cv.glmnet(x = x, y = y, alpha = 0.5, nfolds = 10)
plot(cv_error_elastic_net)
#par(mfrow = c(1, 3))
plot(cv_error_ridge, ylab = "Mean Square Error Ridge")
abline(h = 7)
plot(cv_error_lasso, ylab = "Mean Square Error Lasso")
abline(h = 7)
plot(cv_error_elastic_net, ylab = "Mean Square Error Elastic Net")
abline(h = 7)
set.seed(100)
train.ind <- sample(1:nrow(longley), size = 0.75*(nrow(longley)))
train <- mtcars[train.ind, ]
test <- mtcars[-train.ind, ]
lm.comp <- lm(Employed ~., data = train)
View(train)
set.seed(100)
train.ind <- sample(1:nrow(longley), size = 0.75*(nrow(longley)))
train <- longley[train.ind, ]
test <- longley[-train.ind, ]
lm.comp <- lm(Employed ~., data = train)
lm.comp.pred <- predict(lm.comp, new_data = test)
lm.mse <- mean((lm.comp.pred - test$Employed)^2)
lm.mse
tmatrix <- x
ridge.pred = predict(modelos_ridge, s = cv_error_ridge$lambda.min, newx=tmatrix)
ridge.mse = mean((ridge.pred - longley$Employed)^2)
lasso.pred = predict(modelos_lasso, s = cv_error_lasso$lambda.min, newx=tmatrix)
lasso.mse = mean((lasso.pred - longley$Employed)^2)
enet.pred = predict(modelos_elastic_net, s = cv_error_elastic_net$lambda.min, newx=tmatrix)
enet.mse = mean((enet.pred - longley$Employed)^2)
names <- c("Full", "Ridge", "Lasso", "Elastic Net")
values <- c(lm.mse, ridge.mse, lasso.mse, enet.mse)
barplot(values,
names.arg = names,
main = "Mean Squared Error",
xlab = "Modelos",
ylab = "MSE",
col = "lightblue")
names <- c("Ridge", "Lasso", "Elastic Net")
values <- c(ridge.mse, lasso.mse, enet.mse)
barplot(values,
names.arg = names,
main = "Mean Squared Error",
xlab = "Modelos",
ylab = "MSE",
col = "lightblue")
getwd
getwd()
setwd("C:/Austral/mcd-reg-adv/datasets")
setwd("C:/Austral/mcd-reg-adv/datasets")
prostata <- read_delim("prostata.csv", delim = ";",
escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Austral/mcd-reg-adv/datasets")
prostata <- read_delim("prostata.csv", delim = ";",
escape_double = FALSE, trim_ws = TRUE)
View(prostata)
setwd("C:/Austral/mcd-reg-adv/datasets")
prostata <- read_delim("prostata.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
modelo.prosta <- lm(log_psa ~., data=prostata)
summary(modelo.prosta)
corrplot(prostata)
corrplot(cor(prostata))
corrplot(cor(prostata[,-"log_psa"]))
corrplot(cor(prostata[,-log_psa]))
corrplot( cor( prostata[,-c('log_psa')] ) )
corrplot( cor( prostata[-1] ) )
corrplot( cor( prostata[,-1] ) )
corrplot( cor( prostata ) )
prostata[0]
prostata[1]
prostata[-1]
prostata[,-1]
prostata[,-"log_psa"]
prostata[,c("log_psa")]
prostata[,-c("log_psa")]
prostata[,-which(names(prostata) == 'log_psa')]
corrplot( cor( prostata[,-which(names(prostata) == 'log_psa')] ) )
cor( prostata[,-which(names(prostata) == 'log_psa')] )
cor( prostata[,-which(names(prostata) == 'log_psa')] )
corrplot( cor( prostata[,-which(names(prostata) == 'log_psa')] ) )
setwd("C:/Austral/mcd-reg-adv/datasets")
prostata <- read_delim("prostata.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
setwd("C:/Austral/mcd-reg-adv/datasets")
prostata <- read_delim("prostata.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
plot(modelo.prosta)
test_supuestos <- function( my_model, nivel_significancia = 0.05 ) {
suppressMessages( require(lmtest) )
suppressMessages( require(car) )
#Shapiro Test
t_sha <- shapiro.test( my_model$residuals )
t_sha_obs <- ifelse( t_sha$p.value > nivel_significancia,
"Los residuos son normales.",
"Los residuos NO son normales.")
#BP Test
t_bp <- bptest( my_model )
t_bp_obs <- ifelse( unname(t_bp$p.value) > nivel_significancia,
"Homocedasticidad. La varianza de los residuos es constante.",
"Heterocedasticidad. La varianza de los residuos NO es constante.")
#Durbin-Watson Test
t_dwt <- durbinWatsonTest( my_model )
t_dwt_obs <- ifelse( t_dwt$p > nivel_significancia,
"No hay autocorrelación. Los residuos son independientes.",
"Hay autocorrelación. Los residuos NO son independientes.")
resultados <- data.frame(
Prueba = c("Shapiro", "Breusch-Pagan", "Durbin-Watson"),
P_Value = c(t_sha$p.value, unname(t_bp$p.value), t_dwt$p)
)
resultados$H0 <- ifelse( resultados$P_Value > nivel_significancia, "No rechazada", "Rechazada" )
resultados$Observaciones <- ifelse( resultados$Prueba == "Shapiro", t_sha_obs,
ifelse( resultados$Prueba == "Breusch-Pagan", t_bp_obs, t_dwt_obs ) )
return(resultados)
}
test_supuestos(modelo.prosta)
mod.pros.comb <- regsubsets(log_psa ~ ., data = prostata, nvmax = 8)
summary(mod.pros.comb)
summary(mod.pros.comb)$bic
which.min(summary(mod.pros.comb)$bic)
p <- ggplot(data = data.frame(n_predictores = 1:8,
BIC = summary(mod.pros.comb)$bic),
aes( x = n_predictores, y = R_ajustado) ) +
geom_line() +
geom_point()
p <- p + geom_point( aes( x=n_predictores[which.min(summary(mod.pros.comb)$bic)],
y=R_ajustado[which.min(summary(mod.pros.comb)$bic)]),
colour = "red", size = 3 )
p <- p + scale_x_continuous(breaks = c(0:14)) + theme_bw() +
labs(title = "BIC vs Número de predictores", x = "Número predictores", y = "BIC")
p
p <- ggplot(data = data.frame(n_predictores = 1:8,
BIC = summary(mod.pros.comb)$bic),
aes( x = n_predictores, y = R_ajustado) ) +
geom_line() +
geom_point()
p <- p + geom_point( aes( x=n_predictores[which.min(summary(mod.pros.comb)$bic)],
y=BIC[which.min(summary(mod.pros.comb)$bic)]),
colour = "red", size = 3 )
p <- p + scale_x_continuous(breaks = c(0:14)) + theme_bw() +
labs(title = "BIC vs Número de predictores", x = "Número predictores", y = "BIC")
p
p <- ggplot(data = data.frame(n_predictores = 1:8,
BIC = summary(mod.pros.comb)$bic),
aes( x = n_predictores, y = BIC) ) +
geom_line() +
geom_point()
p <- p + geom_point( aes( x=n_predictores[which.min(summary(mod.pros.comb)$bic)],
y=BIC[which.min(summary(mod.pros.comb)$bic)]),
colour = "red", size = 3 )
p <- p + scale_x_continuous(breaks = c(0:14)) + theme_bw() +
labs(title = "BIC vs Número de predictores", x = "Número predictores", y = "BIC")
p
modelo_todos_best$predictors[which.min( summary( mod.pros.comb )$bic )]
mod.pros.comb$predictors[which.min( summary( mod.pros.comb )$bic )]
selected_variables <- names(coef(mod.pros.comb, id = which.min(summary(mod.pros.comb)$bic)))
print(selected_variables)
test_supuestos <- function( my_model, nivel_significancia = 0.05 ) {
suppressMessages( require(lmtest) )
suppressMessages( require(car) )
#Shapiro Test
t_sha <- shapiro.test( my_model$residuals )
t_sha_obs <- ifelse( t_sha$p.value > nivel_significancia,
"Los residuos son normales.",
"Los residuos NO son normales.")
#BP Test
t_bp <- bptest( my_model )
t_bp_obs <- ifelse( unname(t_bp$p.value) > nivel_significancia,
"Homocedasticidad. La varianza de los residuos es constante.",
"Heterocedasticidad. La varianza de los residuos NO es constante.")
#Durbin-Watson Test
t_dwt <- durbinWatsonTest( my_model )
t_dwt_obs <- ifelse( t_dwt$p > nivel_significancia,
"No hay autocorrelación. Los residuos son independientes.",
"Hay autocorrelación. Los residuos NO son independientes.")
resultados <- data.frame(
Prueba = c("Shapiro", "Breusch-Pagan", "Durbin-Watson"),
P_Value = c(t_sha$p.value, unname(t_bp$p.value), t_dwt$p)
)
resultados$H0 <- ifelse( resultados$P_Value > nivel_significancia, "No rechazada", "Rechazada" )
resultados$Observaciones <- ifelse( resultados$Prueba == "Shapiro", t_sha_obs,
ifelse( resultados$Prueba == "Breusch-Pagan", t_bp_obs, t_dwt_obs ) )
return(resultados)
}
analizar_vif <- function(modelo) {
vif_values <- vif(modelo)
categorias <- ifelse(vif_values <= 1, "Ausente",
ifelse(vif_values <= 5, "Moderada",
"Significativa"))
resultado <- data.frame(Variables = names(vif_values),
VIF = vif_values,
Multicolinealidad = categorias,
row.names = 1:length(vif_values))
return(resultado)
}
analizar_vif(modelo.prosta)
#Lasso
x <- model.matrix(log_psa ~ ., data = prostata)[, -1]
y <- prostata$log_psa
modelos_lasso <- glmnet(x = x, y = y, alpha = 1)
set.seed(1)
cv_error_lasso <- cv.glmnet(x = x, y = y, alpha = 1, nfolds = 10, type.measure = "mse")
#Ridge
modelos_ridge <- glmnet(x = x, y = y, alpha = 0)
set.seed(1)
cv_error_ridge <- cv.glmnet(x = x, y = y, alpha = 0, nfolds = 10, type.measure = "mse")
#Elastic Net
modelos_elastic_net <- glmnet(x = x, y = y, alpha = 0.5)
set.seed(1)
cv_error_elastic_net <- cv.glmnet(x = x, y = y, alpha = 0.5, nfolds = 10, type.measure = "mse")
#Full
set.seed(100)
train.ind <- sample(1:nrow(prostata), size = 0.75*(nrow(prostata)))
train <- prostata[train.ind, ]
test <- prostata[-train.ind, ]
lm.comp <- lm(log_psa ~., data = train)
lm.comp.pred <- predict(lm.comp, new_data = test)
lm.mse <- mean((lm.comp.pred - prostata$log_psa)^2)
ridge.pred = predict(modelos_ridge, s = cv_error_ridge$lambda.min, newx=tmatrix)
tmatrix <- x
ridge.pred = predict(modelos_ridge, s = cv_error_ridge$lambda.min, newx=tmatrix)
ridge.mse = mean((ridge.pred - longley$Employed)^2)
lasso.pred = predict(modelos_lasso, s = cv_error_lasso$lambda.min, newx=tmatrix)
lasso.mse = mean((lasso.pred - longley$Employed)^2)
enet.pred = predict(modelos_elastic_net, s = cv_error_elastic_net$lambda.min, newx=tmatrix)
enet.mse = mean((enet.pred - longley$Employed)^2)
names <- c("Full", "Ridge", "Lasso", "Elastic Net")
values <- c(lm.mse, ridge.mse, lasso.mse, enet.mse)
barplot(values,
names.arg = names,
main = "Mean Squared Error",
xlab = "Modelos",
ylab = "MSE",
col = "lightblue")
tmatrix <- x
ridge.pred = predict(modelos_ridge, s = cv_error_ridge$lambda.min, newx=tmatrix)
ridge.mse = mean((ridge.pred - prostata$log_psa)^2)
lasso.pred = predict(modelos_lasso, s = cv_error_lasso$lambda.min, newx=tmatrix)
lasso.mse = mean((lasso.pred - prostata$log_psa)^2)
enet.pred = predict(modelos_elastic_net, s = cv_error_elastic_net$lambda.min, newx=tmatrix)
enet.mse = mean((enet.pred - prostata$log_psa)^2)
names <- c("Full", "Ridge", "Lasso", "Elastic Net")
values <- c(lm.mse, ridge.mse, lasso.mse, enet.mse)
barplot(values,
names.arg = names,
main = "Mean Squared Error",
xlab = "Modelos",
ylab = "MSE",
col = "lightblue")
setwd("C:/Austral/mcd-reg-adv/datasets")
setwd("C:/Austral/mcd-reg-adv/datasets")
winequality_white <- read_delim("winequality-white.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "WINDOWS-1252"),
trim_ws = TRUE)
View(winequality_white)
setwd("C:/Austral/mcd-reg-adv/datasets")
winequality_white <- read_delim("winequality-white.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "WINDOWS-1252"),
trim_ws = TRUE)
winequality_red <- read_delim("winequality-red.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "WINDOWS-1252"),
trim_ws = TRUE)
View(winequality_red)
View(winequality_red)
winequality_red <- winequality_red[,1:12]
View(winequality_red)
corrplot( cor(winequality_white), method = "circle")
corrplot( cor(winequality_white), method = "circle")
corrplot( cor(winequality_red), method = "circle")
corrplot( cor(winequality_white), method = "circle", title = "Vinos Blancos")
corrplot( cor(winequality_red), method = "circle", title = "Vinos Tintos")
pca <- prcomp(winequality_white, scale. = TRUE)
summary(pca)
plot(pca, type = "l")
corrplot( cor(winequality_white[,-which(names(winequality_white) == 'calidad')]), method = "circle", title = "Vinos Blancos")
corrplot( cor(winequality_red[,-which(names(winequality_red) == 'calidad')]), method = "circle", title = "Vinos Tintos")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "l")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "l")
pca <- prcomp(winequality_red[,-which(names(winequality_red) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "l")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "b")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "points")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "p")
pca <- prcomp(winequality_white[,-which(names(winequality_white) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "l")
pca <- prcomp(winequality_red[,-which(names(winequality_red) == 'calidad')], scale. = TRUE)
summary(pca)
plot(pca, type = "l")
set.seed(666)
indices <- createDataPartition(data$calidad, p = 0.8, list = FALSE)
set.seed(666)
indices.blanco <- createDataPartition(winequality_white$calidad, p = 0.8, list = FALSE)
set.seed(666)
indices.tinto <- createDataPartition(winequality_red$calidad, p = 0.8, list = FALSE)
train_blanco <- winequality_white[indices, ]
set.seed(666)
indices.blanco <- createDataPartition(winequality_white$calidad, p = 0.8, list = FALSE)
set.seed(666)
indices.tinto <- createDataPartition(winequality_red$calidad, p = 0.8, list = FALSE)
train_blanco <- winequality_white[indices.blanco, ]
test_blanco <- winequality_white[-indices.blanco, ]
train_tinto <- winequality_red[indices.tinto, ]
test_tinto <- winequality_red[-indices.tinto, ]
modelo.blanco <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
suppressMessages( library(readxl) )
suppressMessages( library(readr) )
suppressMessages( library(ggplot2) )
suppressMessages( library(dplyr) )
suppressMessages( library(corrplot) )
suppressMessages( library(MVN) )
suppressMessages( library(sandwich) )
suppressMessages( library(MASS) )
suppressMessages( library(leaps) )
suppressMessages( library(ggpubr) )
suppressMessages( library(carData) )
suppressMessages( library(caret) )
suppressMessages( library(Brq) )
suppressMessages( library(tidyverse) )
suppressMessages( library(nortest) )
suppressMessages( library(car) )
suppressMessages( library(MASS) )
suppressMessages( library(robustbase) )
suppressMessages( library(quantreg) )
suppressMessages( library(MPV) )
suppressMessages( library(olsrr) )
suppressMessages( library(faraway) )
suppressMessages( library(glmnet) )
set.seed(666)
indices.blanco <- createDataPartition(winequality_white$calidad, p = 0.8, list = FALSE)
set.seed(666)
indices.tinto <- createDataPartition(winequality_red$calidad, p = 0.8, list = FALSE)
train_blanco <- winequality_white[indices.blanco, ]
test_blanco <- winequality_white[-indices.blanco, ]
train_tinto <- winequality_red[indices.tinto, ]
test_tinto <- winequality_red[-indices.tinto, ]
modelo.blanco <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
suppressMessages( library(readxl) )
suppressMessages( library(readr) )
suppressMessages( library(ggplot2) )
suppressMessages( library(dplyr) )
suppressMessages( library(corrplot) )
suppressMessages( library(MVN) )
suppressMessages( library(sandwich) )
suppressMessages( library(MASS) )
suppressMessages( library(leaps) )
suppressMessages( library(ggpubr) )
suppressMessages( library(carData) )
suppressMessages( library(caret) )
suppressMessages( library(Brq) )
suppressMessages( library(tidyverse) )
suppressMessages( library(nortest) )
suppressMessages( library(car) )
suppressMessages( library(MASS) )
suppressMessages( library(robustbase) )
suppressMessages( library(quantreg) )
suppressMessages( library(MPV) )
suppressMessages( library(olsrr) )
suppressMessages( library(faraway) )
suppressMessages( library(glmnet) )
suppressMessages( library(pls) )
set.seed(666)
indices.blanco <- createDataPartition(winequality_white$calidad, p = 0.8, list = FALSE)
set.seed(666)
indices.tinto <- createDataPartition(winequality_red$calidad, p = 0.8, list = FALSE)
train_blanco <- winequality_white[indices.blanco, ]
test_blanco <- winequality_white[-indices.blanco, ]
train_tinto <- winequality_red[indices.tinto, ]
test_tinto <- winequality_red[-indices.tinto, ]
modelo.blanco <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
modelo.tinto <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.blanco, val.type = "RMSEP")
validationplot(modelo.tinto, val.type = "RMSEP")
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.tinto.pls, val.type = "RMSEP")
modelo.blanco.pcr <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
validationplot(modelo.blanco.pcr, val.type = "RMSEP")
modelo.tinto.pcr <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.tinto.pcr, val.type = "RMSEP")
modelo.blanco.pcr <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
validationplot(modelo.blanco.pcr, val.type = "RMSEP")
modelo.tinto.pcr <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.tinto.pcr, val.type = "RMSEP")
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.tinto.pls, val.type = "RMSEP")
modelo.blanco.pcr <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pcr <- predict(object = modelo.blanco.pcr, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PCR <- mean((pred_blanco_pcr - test_blanco$calidad)^2)
validationplot(modelo.blanco.pcr, val.type = "RMSEP")
modelo.tinto.pcr <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
validationplot(modelo.tinto.pcr, val.type = "RMSEP")
modelo.blanco.pcr <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pcr <- predict(object = modelo.blanco.pcr, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PCR <- mean((pred_blanco_pcr - test_blanco$calidad)^2)
validationplot(modelo.blanco.pcr, val.type = "RMSEP")
modelo.tinto.pcr <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pcr <- predict(object = modelo.tinto.pcr, newdata = test_tinto, ncomp = 1)
test_tinto_MSE_PCR <- mean((pred_tinto_pcr - test_tinto$calidad)^2)
validationplot(modelo.tinto.pcr, val.type = "RMSEP")
metodo <- c("PCR", "PLS")
test_MSE <- c(test_blanco_MSE_PCR,test_tinto_MSE_PCR)
resultados <- data.frame(metodo, test_MSE)
resultados
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pls <- predict(object = modelo.blanco.pls, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PLS <- mean((pred_blanco_pls - test_blanco$calidad)^2)
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pls <- predict(object = modelo.tinto.pls, newdata = test_tinto, ncomp = 1)
test_tinto_MSE_PLS <- mean((pred_tinto_pls - test_tinto$calidad)^2)
validationplot(modelo.tinto.pls, val.type = "RMSEP")
Sepa <- c("Blanco", "Tinto")
MSE_PCR <- c(test_blanco_MSE_PCR, test_tinto_MSE_PCR)
MSE_PLS <- c(test_blanco_MSE_PLS, test_tinto_MSE_PLS)
resultados <- data.frame(Sepa, MSE_PCR, MSE_PLS)
resultados
modelo.blanco.pcr <- pcr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pcr <- predict(object = modelo.blanco.pcr, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PCR <- mean((pred_blanco_pcr - test_blanco$calidad)^2)
validationplot(modelo.blanco.pcr, val.type = "RMSEP")
modelo.tinto.pcr <- pcr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pcr <- predict(object = modelo.tinto.pcr, newdata = test_tinto, ncomp = 3)
test_tinto_MSE_PCR <- mean((pred_tinto_pcr - test_tinto$calidad)^2)
validationplot(modelo.tinto.pcr, val.type = "RMSEP")
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pls <- predict(object = modelo.blanco.pls, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PLS <- mean((pred_blanco_pls - test_blanco$calidad)^2)
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pls <- predict(object = modelo.tinto.pls, newdata = test_tinto, ncomp = 3)
test_tinto_MSE_PLS <- mean((pred_tinto_pls - test_tinto$calidad)^2)
validationplot(modelo.tinto.pls, val.type = "RMSEP")
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pls <- predict(object = modelo.blanco.pls, newdata = test_blanco, ncomp = 1)
test_blanco_MSE_PLS <- mean((pred_blanco_pls - test_blanco$calidad)^2)
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pls <- predict(object = modelo.tinto.pls, newdata = test_tinto, ncomp = 1)
test_tinto_MSE_PLS <- mean((pred_tinto_pls - test_tinto$calidad)^2)
validationplot(modelo.tinto.pls, val.type = "RMSEP")
set.seed(666)
modelo.blanco.pls <- plsr(calidad ~ ., data = train_blanco, scale = TRUE, validation = "CV")
pred_blanco_pls <- predict(object = modelo.blanco.pls, newdata = test_blanco, ncomp = 3)
test_blanco_MSE_PLS <- mean((pred_blanco_pls - test_blanco$calidad)^2)
validationplot(modelo.blanco.pls, val.type = "RMSEP")
set.seed(666)
modelo.tinto.pls <- plsr(calidad ~ ., data = train_tinto, scale = TRUE, validation = "CV")
pred_tinto_pls <- predict(object = modelo.tinto.pls, newdata = test_tinto, ncomp = 1)
test_tinto_MSE_PLS <- mean((pred_tinto_pls - test_tinto$calidad)^2)
validationplot(modelo.tinto.pls, val.type = "RMSEP")
Sepa <- c("Blanco", "Tinto")
MSE_PCR <- c(test_blanco_MSE_PCR, test_tinto_MSE_PCR)
MSE_PLS <- c(test_blanco_MSE_PLS, test_tinto_MSE_PLS)
resultados <- data.frame(Sepa, MSE_PCR, MSE_PLS)
resultados
