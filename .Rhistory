print(plot)
#Almaceno las medias
df_mean <- rbind(df_mean, data.frame(i, uX, uY))
#Calculo sd de X
sdX <- sd(df$x)
#Calculo sd de Y
sdY <- sd(df$y)
#Almaceno los sd
df_sd <- rbind(df_sd, data.frame(i, sdX, sdY))
#Borro las variables creadas temporalmente
rm(df,uX,uY, sdX, sdY, i, title, subtitle, plot)
}
anscombe <- read_excel("./datasets/anscombe.xlsx")
#Tengo que hacerlo para cada par de variables
#Creo un df para almacenar las medias para el punto b
df_mean <- data.frame()
df_sd <- data.frame()
for ( i in 1:4 ) {
df <- data.frame( x = anscombe[,i], y = anscombe[,i+4] )
names(df) <- c("x","y")
#Calculo la media de X
uX <- mean(df$x)
#Calculo la media de Y
uY <- mean(df$y)
title <- paste0("Anscombe - ", "x",i, " vs ", "y",i)
subtitle <- paste0("uX: ", uX, " - uY: ", uY)
#Grafico
plot <- ggplot( data = df, aes( x = x, y = y) ) +
geom_point( colour = "red4" ) +
ggtitle( title, subtitle = subtitle ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = uX , yintercept = uY )
print(plot)
#Almaceno las medias
df_mean <- rbind(df_mean, data.frame(i, uX, uY))
#Calculo sd de X
sdX <- sd(df$x)
#Calculo sd de Y
sdY <- sd(df$y)
#Almaceno los sd
df_sd <- rbind(df_sd, data.frame(i, sdX, sdY))
#Borro las variables creadas temporalmente
rm(df,uX,uY, sdX, sdY, i, title, subtitle, plot)
}
View(anscombe)
df_mean
df_sd
anscombe <- read_excel("./datasets/anscombe.xlsx")
#Tengo que hacerlo para cada par de variables
#Creo un df para almacenar las medias para el punto b
df_mean <- data.frame()
df_sd <- data.frame()
for ( i in 1:4 ) {
df <- data.frame( x = anscombe[,i], y = anscombe[,i+4] )
names(df) <- c("x","y")
#Calculo la media de X
uX <- mean(df$x)
#Calculo la media de Y
uY <- mean(df$y)
title <- paste0("Anscombe - ", "x",i, " vs ", "y",i)
subtitle <- paste0("uX: ", uX, " - uY: ", uY)
#Grafico
plot <- ggplot( data = df, aes( x = x, y = y) ) +
geom_point( colour = "red4" ) +
ggtitle( title, subtitle = subtitle ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = uX , yintercept = uY )
print(plot)
#Almaceno las medias
df_mean <- rbind(df_mean, data.frame(i, uX, uY))
#Calculo sd de X
sdX <- sd(df$x)
#Calculo sd de Y
sdY <- sd(df$y)
#Almaceno los sd
df_sd <- rbind(df_sd, data.frame(i, sdX, sdY))
#Borro las variables creadas temporalmente
rm(df,uX,uY, sdX, sdY, i, title, subtitle, plot)
}
df_mean
df_sd
#Tengo que hacerlo para cada par de variables
#Creo un df para almacenar las medias para el punto b
df_mean <- data.frame()
df_sd <- data.frame()
df_cor <- data.frame()
for ( i in 1:4 ) {
df <- data.frame( x = anscombe[,i], y = anscombe[,i+4] )
names(df) <- c("x","y")
#Calculo la media de X
uX <- mean(df$x)
#Calculo la media de Y
uY <- mean(df$y)
#Almaceno las medias
df_mean <- rbind(df_mean, data.frame(i, uX, uY))
title <- paste0("Anscombe - ", "x",i, " vs ", "y",i)
subtitle <- paste0("uX: ", uX, " - uY: ", uY)
#Grafico
plot <- ggplot( data = df, aes( x = x, y = y) ) +
geom_point( colour = "red4" ) +
ggtitle( title, subtitle = subtitle ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = uX , yintercept = uY )
print(plot)
#Calculo sd de X
sdX <- sd(df$x)
#Calculo sd de Y
sdY <- sd(df$y)
#Almaceno los sd
df_sd <- rbind(df_sd, data.frame(i, sdX, sdY))
#Calculo de correlacion de cada par
df_cor <- rbind(df_cor, data.frame(i, cor(df$x,df$y)))
#Borro las variables creadas temporalmente
rm(df,uX,uY, sdX, sdY, i, title, subtitle, plot)
}
df_cor
icm <- read_excel("./datasets/peso_edad_colest.xlsx")
icm <- read_excel("./datasets/peso_edad_colest.xlsx")
View(icm)
ggplot( data = icm, aes( x = colest, y = edad ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Peso Vivo (Kg) vs Espesor Grasa Dorsal (mm)" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = u_PV , yintercept = u_EGD )
ggplot( data = icm, aes( x = colest, y = edad ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Peso Vivo (Kg) vs Espesor Grasa Dorsal (mm)" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$colest) , yintercept = mean(icm$edad) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Peso Vivo (Kg) vs Espesor Grasa Dorsal (mm)" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = peso, y = colest ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$peso) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = peso, y = colest ) ) +
geom_point( colour = "red4", size = 2) +
ggtitle( "Colesterol en función del peso" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$peso) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = peso, y = colest ) ) +
geom_point( colour = "purple", size = 2) +
ggtitle( "Colesterol en función del peso" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$peso) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "cyan", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "red", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "darkblue", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
ggplot( data = icm, aes( x = edad, y = colest ) ) +
geom_point( colour = "orange", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(icm$edad) , yintercept = mean(icm$colest) )
# Modelo lineal para el colesterol en función de la edad
lm(icm$colest ~ icm$edad)
summary(icm_lm)
# Modelo lineal para el colesterol en función de la edad
icm_lm <- lm(icm$colest ~ icm$edad)
summary(icm_lm)
# Modelo lineal para el colesterol en función de la edad
icm_lm <- lm(colest ~ edad, data = icm)
summary(icm_lm)
wald.test?
help(wald.test)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm))
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 2)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 3)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
coef(icm_lm)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
intervalos_confianza <- confint(icm_lm)
print(intervalos_confianza)
vcov(icm_lm)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 2)
gorr<- read_excel("./datasets/gorriones.xlsx")
gorr<-as.data.frame(gorr)
dim(gorr)#49  7
names(gorr)
par(bg="white")
pairs(gorr) # representa todos los diagramas de dispersión de a pares
#Diagrama con ggplot
ggplot(data = gorr, aes(x = Cabeza, y = Alas)) +
geom_point(colour = "red4") +
ggtitle("Cabeza vs Alas") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#install.packages("aod")
library(aod)
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 2:3)#compara cabeza y pata-> Rechaza que al menos uno de los coef es 0
############# modelos lineales simples y múltiples
model_gorr1 <- lm(Largo ~ Alas, data = gorr)
summary(model_gorr1)
model_gorr2 <- lm(Largo ~ Cabeza, data = gorr)
summary(model_gorr2)
model_gorr3 <- lm(Largo ~ Pata, data = gorr)
summary(model_gorr3)
model_gorr4 <- lm(Largo ~ Cuerpo, data = gorr)
summary(model_gorr4)
model_gorr5 <- lm(Largo ~ Alas + Pata, data = gorr)
summary(model_gorr5)
model_gorr <- lm(Largo ~ Alas + Cabeza + Pata + Cuerpo, data = gorr)
summary(model_gorr)
#install.packages("aod")
library(aod)
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 2:3)#compara cabeza y pata-> Rechaza que al menos uno de los coef es 0
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 1)#compara Alas-> NO Rechaza que el coef es 0
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 2)#compara Cabeza-> Rechaza que el coef es 0
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 3)#compara Pata -> NO rechaza que el coef es 0
wald.test(Sigma = vcov(model_gorr), b = coef(model_gorr), Terms = 4)#compara Cuerpo-> NO rechaza que el coef es 0
View(gorr)
AIC(model_gorr1)
BIC(model_gorr1)
AIC(model_gorr2)
BIC(model_gorr2)
AIC(model_gorr3)
BIC(model_gorr3)
AIC(model_gorr5)
BIC(model_gorr5)
AIC(model_gorr)
BIC(model_gorr)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1:2)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 2)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 2)
#Test de Wald
library(aod)
wald.test(Sigma = vcov(icm_lm), b = coef(icm_lm), Terms = 1)
icm_lm_all <- lm(colest ~ edad + peso, data = icm)
summary(icm_lm_all)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 1)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 2)
vcov(icm_lm_all)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 2)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 3)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 1)
wald.test(Sigma = vcov(icm_lm_all), b = coef(icm_lm_all), Terms = 3)
predict(object = icm_lm, newdata = data.frame(edad=25))
predict(object = icm_lm, newdata = edad=25)
predict(object = icm_lm, newdata = 25)
predict(object = icm_lm, newdata = data.frame(edad=c(25,48,80)))
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs(title = "Largo vs Alas", x = "Alas") +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
predicciones <- predict(object = icm_lm,
newdata = data.frame(edad=c(25,48,80)))
predicciones
nuevos_datos <- c(25,48,80)
predicciones <- predict(object = icm_lm,
newdata = data.frame(edad=nuevos_datos))
predicciones
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_point(data = nuevos_datos, aes(y = predicciones), color = "blue", size = 2)
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
geom_point(data = nuevos_datos, aes(y = predicciones), color = "blue", size = 2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
nuevos_datos <- data.frame(edad=c(25,48,80))
predicciones <- predict(object = icm_lm,
newdata = data.frame(nuevos_datos))
predicciones
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = icm, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
icm_2 <- rbind(icm, nuevos_datos)
View(nuevos_datos)
icm_2 <- rbind(icm, c(0,25,237.2730))
icm_2 <- rbind(icm_2, c(0,48,367.7024))
icm_2 <- rbind(icm_2, c(0,80,549.1693))
ggplot(data = icm2, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
View(icm_2)
icm_2 <- rbind(icm, c(0,25,237.2730))
icm_2 <- rbind(icm_2, c(0,48,367.7024))
icm_2 <- rbind(icm_2, c(0,80,549.1693))
ggplot(data = icm_2, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
View(gorr)
#Analizamos si los residuos son normales
icm2 <- icm
icm2$prediccion <- icm_lm$fitted.values
icm2$residuos <- icm_lm$residuals
ggplot(data = icm2, aes(x = prediccion, y = residuos)) +
geom_point(aes(color = residuos)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_hline(yintercept = 0) + geom_segment(aes(xend = prediccion, yend = 0), alpha = 0.2) +
labs(title = "Distribución de los residuos", x = "predicción modelo", y = "residuo") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
#Analizamos si los residuos son normales
icm2 <- icm
icm2$prediccion <- icm_lm$fitted.values
icm2$residuos <- icm_lm$residuals
ggplot(data = icm2, aes(x = prediccion, y = residuos)) +
geom_point(aes(color = residuos)) +
scale_color_gradient2(low = "blue3",
mid = "grey",
high = "red") +
geom_hline(yintercept = 0) +
geom_segment(aes(xend = prediccion,
yend = 0),
alpha = 0.2) +
labs(title = "Distribución de los residuos",
x = "predicción modelo",
y = "residuo") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
#Analizamos si los residuos son normales
icm2 <- icm
icm2$prediccion <- icm_lm$fitted.values
icm2$residuos <- icm_lm$residuals
ggplot(data = icm2, aes(x = prediccion, y = residuos)) +
geom_point(aes(color = residuos)) +
scale_color_gradient2(low = "blue3",
mid = "grey",
high = "red") +
geom_hline(yintercept = 0) +
geom_segment(aes(xend = prediccion,
yend = 0),
alpha = 0.2) +
labs(title = "Distribución de los residuos",
x = "predicción modelo",
y = "residuo") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
ggplot(data = icm2,
aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +
labs(title = "Histograma de los residuos") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
qqnorm(icm_lm$residuals)
qqline(icm_lm$residuals)
shapiro.test(model_gorr1$residuals)
#Analizamos si los residuos son normales
icm2 <- icm
icm2$prediccion <- icm_lm$fitted.values
icm2$residuos <- icm_lm$residuals
ggplot(data = icm2, aes(x = prediccion, y = residuos)) +
geom_point(aes(color = residuos)) +
scale_color_gradient2(low = "blue3",
mid = "grey",
high = "red") +
geom_hline(yintercept = 0) +
geom_segment(aes(xend = prediccion,
yend = 0),
alpha = 0.2) +
labs(title = "Distribución de los residuos",
x = "predicción modelo",
y = "residuo") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
ggplot(data = icm2,
aes(x = residuos)) +
geom_histogram(aes(y = ..density..)) +
labs(title = "Histograma de los residuos") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
qqnorm(icm_lm$residuals)
qqline(icm_lm$residuals)
shapiro.test(icm_lm$residuals)
icm_2 <- rbind(icm, c(0,25,237.2730))
icm_2 <- rbind(icm_2, c(0,48,367.7024))
icm_2 <- rbind(icm_2, c(0,80,549.1693))
ggplot(data = icm_2, mapping = aes(x = edad, y = colest)) +
geom_point(color = "firebrick", size = 2) +
labs( title = "Colesterol en función de la edad" ) +
geom_point(data = nuevos_datos,
aes(y = predicciones),
color = "blue", size = 2) +
geom_smooth(method = "lm", se = TRUE, level=0.95, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
library(lmtest)
bptest(icm_lm)
#Test de Durbin-Watson
library(car)
dwt(icm_lm)
energia <- read_excel("./datasets/energia.xlsx")
View(energia)
ggplot( data = energia, aes( x = Hora, y = Energía ) ) +
geom_point( colour = "orange", size = 2) +
ggtitle( "Colesterol en función de la edad" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(energia$Hora) , yintercept = mean(energia$Energía) )
ggplot( data = energia, aes( x = Hora, y = Energía ) ) +
geom_point( colour = "orange", size = 2) +
ggtitle( "Energía por hora" ) +
theme_bw() +
theme( plot.title = element_text( hjust = 0.5 ) ) +
geom_quadrant_lines(xintercept = mean(energia$Hora) , yintercept = mean(energia$Energía) )
