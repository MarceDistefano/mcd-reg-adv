# Cp de Mallows
cp_tv_radio <- summary(reg_tv_radio)$cp
cp_radio_periodicos <- summary(reg_radio_periodicos)$cp
cp_tv_periodicos <- summary(reg_tv_periodicos)$cp
# Crear el data frame con los modelos y las métricas
model_data <- data.frame(
Model = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2_Adjusted = c(r2adj_tv_radio, r2adj_radio_periodicos, r2adj_tv_periodicos)
)
model_data
which.min(summary(reg_tv_radio)$cp)
min(summary(reg_tv_radio)$cp)
(summary(reg_tv_radio)$cp)
# Ajuste de modelos de a pares
modelo_tv_radio <- lm(ventas ~ tv + radio, data = publicidad)
modelo_radio_periodicos <- lm(ventas ~ radio + periodico, data = publicidad)
modelo_tv_periodicos <- lm(ventas ~ tv + periodico, data = publicidad)
# Obtener el número óptimo de predictores para cada modelo
reg_tv_radio <- regsubsets(ventas ~ tv + radio, data = publicidad)
reg_radio_periodicos <- regsubsets(ventas ~ radio + periodico, data = publicidad)
reg_tv_periodicos <- regsubsets(ventas ~ tv + periodico, data = publicidad)
# AIC
aic_tv_radio <- AIC(modelo_tv_radio)
aic_radio_periodicos <- AIC(modelo_radio_periodicos)
aic_tv_periodicos <- AIC(modelo_tv_periodicos)
# R2 ajustado
r2adj_tv_radio <- summary(modelo_tv_radio)$adj.r.squared
r2adj_radio_periodicos <- summary(modelo_radio_periodicos)$adj.r.squared
r2adj_tv_periodicos <- summary(modelo_tv_periodicos)$adj.r.squared
# Cp de Mallows
cp_tv_radio <- min(summary(reg_tv_radio)$cp)
cp_radio_periodicos <- min(summary(reg_radio_periodicos)$cp)
cp_tv_periodicos <- min(summary(reg_tv_periodicos)$cp)
# Crear el data frame con los modelos y las métricas
model_data <- data.frame(
Model = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2_Adjusted = c(r2adj_tv_radio, r2adj_radio_periodicos, r2adj_tv_periodicos)
)
model_data
# Ajuste de modelos de a pares
modelo_tv_radio <- lm(ventas ~ tv + radio, data = publicidad)
modelo_radio_periodicos <- lm(ventas ~ radio + periodico, data = publicidad)
modelo_tv_periodicos <- lm(ventas ~ tv + periodico, data = publicidad)
# Obtener el número óptimo de predictores para cada modelo
reg_tv_radio <- regsubsets(ventas ~ tv + radio, data = publicidad)
reg_radio_periodicos <- regsubsets(ventas ~ radio + periodico, data = publicidad)
reg_tv_periodicos <- regsubsets(ventas ~ tv + periodico, data = publicidad)
# AIC
aic_tv_radio <- AIC(modelo_tv_radio)
aic_radio_periodicos <- AIC(modelo_radio_periodicos)
aic_tv_periodicos <- AIC(modelo_tv_periodicos)
# R2 ajustado
r2adj_tv_radio <- summary(modelo_tv_radio)$adj.r.squared
r2adj_radio_periodicos <- summary(modelo_radio_periodicos)$adj.r.squared
r2adj_tv_periodicos <- summary(modelo_tv_periodicos)$adj.r.squared
# Cp de Mallows
cp_tv_radio <- min(summary(reg_tv_radio)$cp)
cp_radio_periodicos <- min(summary(reg_radio_periodicos)$cp)
cp_tv_periodicos <- min(summary(reg_tv_periodicos)$cp)
# Crear el data frame con los modelos y las métricas
model_data <- data.frame(
Model = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2_Adjusted = c(r2adj_tv_radio, r2adj_radio_periodicos, r2adj_tv_periodicos),
Cp_Mallows = c(cp_tv_radio, cp_radio_periodicos, cp_tv_periodicos)
)
model_data
summary(modelo_tv_periodicos)$adj.r.squared
summary(modelo_tv_periodicos)$r.squared
# Ajuste de modelos de a pares
modelo_tv_radio <- lm(ventas ~ tv + radio, data = publicidad)
modelo_radio_periodicos <- lm(ventas ~ radio + periodico, data = publicidad)
modelo_tv_periodicos <- lm(ventas ~ tv + periodico, data = publicidad)
# Obtener el número óptimo de predictores para cada modelo
reg_tv_radio <- regsubsets(ventas ~ tv + radio, data = publicidad)
reg_radio_periodicos <- regsubsets(ventas ~ radio + periodico, data = publicidad)
reg_tv_periodicos <- regsubsets(ventas ~ tv + periodico, data = publicidad)
# AIC
aic_tv_radio <- AIC(modelo_tv_radio)
aic_radio_periodicos <- AIC(modelo_radio_periodicos)
aic_tv_periodicos <- AIC(modelo_tv_periodicos)
# R2 ajustado
r2_tv_radio <- summary(modelo_tv_radio)$r.squared
r2_radio_periodicos <- summary(modelo_radio_periodicos)$r.squared
r2_tv_periodicos <- summary(modelo_tv_periodicos)$r.squared
# Cp de Mallows
cp_tv_radio <- min(summary(reg_tv_radio)$cp)
cp_radio_periodicos <- min(summary(reg_radio_periodicos)$cp)
cp_tv_periodicos <- min(summary(reg_tv_periodicos)$cp)
# Dataframe con los modelos y las métricas
model_data <- data.frame(
Model = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2 = c(r2_tv_radio, r2_radio_periodicos, r2_tv_periodicos),
Cp_Mallows = c(cp_tv_radio, cp_radio_periodicos, cp_tv_periodicos)
)
model_data
# Ajuste de modelos de a pares
modelo_tv_radio <- lm(ventas ~ tv + radio, data = publicidad)
modelo_radio_periodicos <- lm(ventas ~ radio + periodico, data = publicidad)
modelo_tv_periodicos <- lm(ventas ~ tv + periodico, data = publicidad)
# Obtener el número óptimo de predictores para cada modelo
reg_tv_radio <- regsubsets(ventas ~ tv + radio, data = publicidad)
reg_radio_periodicos <- regsubsets(ventas ~ radio + periodico, data = publicidad)
reg_tv_periodicos <- regsubsets(ventas ~ tv + periodico, data = publicidad)
# AIC
aic_tv_radio <- AIC(modelo_tv_radio)
aic_radio_periodicos <- AIC(modelo_radio_periodicos)
aic_tv_periodicos <- AIC(modelo_tv_periodicos)
# R2 ajustado
r2_tv_radio <- summary(modelo_tv_radio)$r.squared
r2_radio_periodicos <- summary(modelo_radio_periodicos)$r.squared
r2_tv_periodicos <- summary(modelo_tv_periodicos)$r.squared
# Cp de Mallows
cp_tv_radio <- min(summary(reg_tv_radio)$cp)
cp_radio_periodicos <- min(summary(reg_radio_periodicos)$cp)
cp_tv_periodicos <- min(summary(reg_tv_periodicos)$cp)
# Dataframe con los modelos y las métricas
model_data <- data.frame(
Model = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2 = c(r2_tv_radio, r2_radio_periodicos, r2_tv_periodicos),
Cp_Mallows = c(cp_tv_radio, cp_radio_periodicos, cp_tv_periodicos)
)
model_data
View(model_data)
# Ajuste de modelos de a pares
modelo_tv_radio <- lm(ventas ~ tv + radio, data = publicidad)
modelo_radio_periodicos <- lm(ventas ~ radio + periodico, data = publicidad)
modelo_tv_periodicos <- lm(ventas ~ tv + periodico, data = publicidad)
# Obtener el número óptimo de predictores para cada modelo
reg_tv_radio <- regsubsets(ventas ~ tv + radio, data = publicidad)
reg_radio_periodicos <- regsubsets(ventas ~ radio + periodico, data = publicidad)
reg_tv_periodicos <- regsubsets(ventas ~ tv + periodico, data = publicidad)
# AIC
aic_tv_radio <- AIC(modelo_tv_radio)
aic_radio_periodicos <- AIC(modelo_radio_periodicos)
aic_tv_periodicos <- AIC(modelo_tv_periodicos)
# R2 ajustado
r2_tv_radio <- summary(modelo_tv_radio)$r.squared
r2_radio_periodicos <- summary(modelo_radio_periodicos)$r.squared
r2_tv_periodicos <- summary(modelo_tv_periodicos)$r.squared
# Cp de Mallows
cp_tv_radio <- min(summary(reg_tv_radio)$cp)
cp_radio_periodicos <- min(summary(reg_radio_periodicos)$cp)
cp_tv_periodicos <- min(summary(reg_tv_periodicos)$cp)
# Dataframe con los modelos y las métricas
model_data <- data.frame(
Modelo = c("TV + Radio", "Radio + Periodico", "TV + Periodico"),
AIC = c(aic_tv_radio, aic_radio_periodicos, aic_tv_periodicos),
R2 = c(r2_tv_radio, r2_radio_periodicos, r2_tv_periodicos),
Cp_Mallows = c(cp_tv_radio, cp_radio_periodicos, cp_tv_periodicos)
)
model_data
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(Ventas ~ TV + Radio, data = datos)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(Ventas ~ TV + Radio, data = publicidad)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(datos$TV, datos$Radio, datos$Ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Add the fitted plane to the plot
plane3d(modelo_selected, draw_polygon = TRUE, col = "blue", alpha = 0.5)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(datos$TV)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(publicidad$tv)
radio_range <- range(publicidad$radio)
grid_tv <- seq(tv_range[1], tv_range[2], length.out = 20)
grid_radio <- seq(radio_range[1], radio_range[2], length.out = 20)
grid <- expand.grid(TV = grid_tv, Radio = grid_radio)
# Predict the response variable for the grid of values
grid$Ventas <- predict(modelo_selected, newdata = grid)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(publicidad$tv)
radio_range <- range(publicidad$radio)
grid_tv <- seq(tv_range[1], tv_range[2], length.out = 20)
grid_radio <- seq(radio_range[1], radio_range[2], length.out = 20)
grid <- expand.grid(TV = grid_tv, Radio = grid_radio)
# Predict the response variable for the grid of values
grid$ventas <- predict(modelo_selected, newdata = grid)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(publicidad$tv)
radio_range <- range(publicidad$radio)
grid_tv <- seq(tv_range[1], tv_range[2], length.out = 20)
grid_radio <- seq(radio_range[1], radio_range[2], length.out = 20)
grid <- expand.grid(TV = grid_tv, Radio = grid_radio)
# Predict the response variable for the grid of values
grid$ventas <- predict(modelo_selected, newdata = grid)
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(publicidad$tv)
radio_range <- range(publicidad$radio)
grid_tv <- seq(tv_range[1], tv_range[2], length.out = 20)
grid_radio <- seq(radio_range[1], radio_range[2], length.out = 20)
grid <- expand.grid(tv = grid_tv, radio = grid_radio)
# Predict the response variable for the grid of values
grid$ventas <- predict(modelo_selected, newdata = grid)
# Create a contour plot of the fitted plane
contour(grid_tv, grid_radio, matrix(grid$Ventas, nrow = length(grid_tv)), add = TRUE, col = "blue")
library(scatterplot3d)
# Fit the selected model
modelo_selected <- lm(ventas ~ tv + radio, data = publicidad)
# Generate the scatterplot with the fitted plane
scatterplot3d(publicidad$tv, publicidad$radio, publicidad$ventas, pch = 16, highlight.3d = TRUE,
xlab = "TV", ylab = "Radio", zlab = "Ventas")
# Create a grid of TV and Radio values
tv_range <- range(publicidad$tv)
radio_range <- range(publicidad$radio)
grid_tv <- seq(tv_range[1], tv_range[2], length.out = 20)
grid_radio <- seq(radio_range[1], radio_range[2], length.out = 20)
grid <- expand.grid(tv = grid_tv, radio = grid_radio)
# Predict the response variable for the grid of values
grid$ventas <- predict(modelo_selected, newdata = grid)
# Create a contour plot of the fitted plane
contour(grid_tv, grid_radio, matrix(grid$ventas, nrow = length(grid_tv)), add = TRUE, col = "blue")
# Evaluate the adequacy of the fitted plane visually
rango_tv <- range(datos$tv)
rango_tv <- range(publicidad$tv)
nuevos_valores_tv <- seq(from = rango_tv[1], to = rango_tv[2], length.out = 20)
rango_radio <- range(datos$radio)
rango_tv <- range(publicidad$tv)
nuevos_valores_tv <- seq(from = rango_tv[1], to = rango_tv[2], length.out = 20)
rango_radio <- range(publicidad$radio)
nuevos_valores_radio <- seq(from = rango_radio[1], to = rango_radio[2],
length.out = 20)
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo, newdata = data.frame(tv, radio))
})
rango_tv <- range(publicidad$tv)
nuevos_valores_tv <- seq(from = rango_tv[1], to = rango_tv[2], length.out = 20)
rango_radio <- range(publicidad$radio)
nuevos_valores_radio <- seq(from = rango_radio[1], to = rango_radio[2],
length.out = 20)
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo_tv_radio, newdata = data.frame(tv, radio))
})
superficie <- persp(x = nuevos_valores_tv, y = nuevos_valores_radio,
z = predicciones,
theta = 18, phi = 20,
col = "lightblue", shade = 0.1,
xlab = "tv", ylab = "radio", zlab = "ventas",
ticktype = "detailed",
main = "Predición ventas ~ TV y Radio")
observaciones <- trans3d(datos$tv, datos$radio, datos$ventas, superficie)
rango_tv <- range(publicidad$tv)
nuevos_valores_tv <- seq(from = rango_tv[1], to = rango_tv[2], length.out = 20)
rango_radio <- range(publicidad$radio)
nuevos_valores_radio <- seq(from = rango_radio[1], to = rango_radio[2],
length.out = 20)
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo_tv_radio, newdata = data.frame(tv, radio))
})
superficie <- persp(x = nuevos_valores_tv, y = nuevos_valores_radio,
z = predicciones,
theta = 18, phi = 20,
col = "lightblue", shade = 0.1,
xlab = "tv", ylab = "radio", zlab = "ventas",
ticktype = "detailed",
main = "Predición ventas ~ TV y Radio")
observaciones <- trans3d(publicidad$tv, publicidad$radio, publicidad$ventas, superficie)
error <- trans3d(datos$tv, datos$radio, fitted(modelo), superficie)
rango_tv <- range(publicidad$tv)
nuevos_valores_tv <- seq(from = rango_tv[1], to = rango_tv[2], length.out = 20)
rango_radio <- range(publicidad$radio)
nuevos_valores_radio <- seq(from = rango_radio[1], to = rango_radio[2],
length.out = 20)
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo_tv_radio, newdata = data.frame(tv, radio))
})
superficie <- persp(x = nuevos_valores_tv, y = nuevos_valores_radio,
z = predicciones,
theta = 18, phi = 20,
col = "lightblue", shade = 0.1,
xlab = "tv", ylab = "radio", zlab = "ventas",
ticktype = "detailed",
main = "Predición ventas ~ TV y Radio")
observaciones <- trans3d(publicidad$tv, publicidad$radio, publicidad$ventas, superficie)
error <- trans3d(publicidad$tv, publicidad$radio, fitted(modelo_tv_radio), superficie)
points(observaciones, col = "red", pch = 16)
segments(observaciones$x, observaciones$y, error$x, error$y)
modelo_interaccion <- lm(formula = ventas ~ tv + radio + tv:radio, data = datos)
modelo_interaccion <- lm(formula = ventas ~ tv + radio + tv:radio, data = publicidad)
summary(modelo_interaccion)
# La función outer() permite aplicar una función a cada combinación
# de los parámetros x, y pasados como argumento, es una alternativa
# a utilizar expand.grid()
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo_interaccion,
newdata = data.frame(tv, radio))
})
superficie <- persp(x = nuevos_valores_tv, y = nuevos_valores_radio,
z = predicciones,
theta = 18, phi = 20,
col = "lightblue", shade = 0.1,
xlab = "tv", ylab = "radio", zlab = "ventas",
ticktype = "detailed",
main = "Predición ventas ~ TV y Radio"
)
# Se pueden representar las observaciones a partir de las cuales
# se ha creado la superficie así como segmentos que midan la
# distancia respecto al modelo_interaccion generado.
observaciones <- trans3d(datos$tv, datos$radio, datos$ventas, superficie)
# La función outer() permite aplicar una función a cada combinación
# de los parámetros x, y pasados como argumento, es una alternativa
# a utilizar expand.grid()
predicciones <- outer(X = nuevos_valores_tv, Y = nuevos_valores_radio,
FUN = function(tv, radio) {
predict(object = modelo_interaccion,
newdata = data.frame(tv, radio))
})
superficie <- persp(x = nuevos_valores_tv, y = nuevos_valores_radio,
z = predicciones,
theta = 18, phi = 20,
col = "lightblue", shade = 0.1,
xlab = "tv", ylab = "radio", zlab = "ventas",
ticktype = "detailed",
main = "Predición ventas ~ TV y Radio"
)
# Se pueden representar las observaciones a partir de las cuales
# se ha creado la superficie así como segmentos que midan la
# distancia respecto al modelo_interaccion generado.
observaciones <- trans3d(publicidad$tv, publicidad$radio, publicidad$ventas, superficie)
error <- trans3d(publicidad$tv, publicidad$radio, fitted(modelo_interaccion),
superficie)
points(observaciones, col = "red", pch = 16)
segments(observaciones$x, observaciones$y, error$x, error$y)
anova(modelo_tv_radio, modelo_interaccion)
summary(modelo_tv_radio)$r2adj
View(modelo_tv_radio)
summary(modelo_tv_radio)$r.square
summary(modelo_tv_radio)$r.square
summary(modelo_interaccion)$r.square
suppressMessages( library(readxl) )
suppressMessages( library(ggplot2) )
suppressMessages( library(dplyr) )
suppressMessages( library(corrplot) )
suppressMessages( library(MVN) )
suppressMessages( library(sandwich) )
suppressMessages( library(MASS) )
suppressMessages( library(leaps) )
suppressMessages( library(ggpubr) )
suppressMessages( library(carData) )
Salaries
modelo.salaries <- lm(salary ~ sex, data = Salaries)
summary( modelo.salaries )
#Libreria carData
Salaries
modelo.salaries <- lm(salary ~ sex, data = Salaries)
summary( modelo.salaries )
modelo.salaries <- lm(salary ~ sex, data = Salaries)
summary( modelo.salaries )
#Libreria carData
data(Salaries)
modelo.salaries <- lm(salary ~ sex, data = Salaries)
summary( modelo.salaries )
model.salary <- lm(salary ~ yrs.service, data = Salaries)
summary(model.salary)
# Ajustar diferentes modelos lineales con dos variables
modelo_1 <- lm(salary ~ sex + yrs.service, data = Salaries)
modelo_2 <- lm(salary ~ sex + yrs.since.phd, data = Salaries)
modelo_3 <- lm(salary ~ yrs.service + yrs.since.phd, data = Salaries)
modelo_4 <- lm(salary ~ sex * yrs.service, data = Salaries)
modelo_5 <- lm(salary ~ sex * yrs.since.phd, data = Salaries)
modelo_6 <- lm(salary ~ yrs.service * yrs.since.phd, data = Salaries)
# Comparar los modelos utilizando criterios de ajuste
modelos <- list(modelo_1, modelo_2, modelo_3, modelo_4, modelo_5, modelo_6)
criterios_ajuste <- c("AIC", "BIC", "R-squared", "Adjusted R-squared", "Cp_Mallows")
resultados <- data.frame(Modelo = 1:length(modelos))
for (i in 1:length(modelos)) {
modelo <- modelos[[i]]
resultados[i, "AIC"] <- AIC(modelo)
resultados[i, "BIC"] <- BIC(modelo)
resultados[i, "R-squared"] <- summary(modelo)$r.squared
resultados[i, "Adjusted R-squared"] <- summary(modelo)$adj.r.squared
resultados[i, "Cp_Mallows"] <- leaps::Cp(modelo)
}
# Ajustar diferentes modelos lineales con dos variables
modelo_1 <- lm(salary ~ sex + yrs.service, data = Salaries)
modelo_2 <- lm(salary ~ sex + yrs.since.phd, data = Salaries)
modelo_3 <- lm(salary ~ yrs.service + yrs.since.phd, data = Salaries)
modelo_4 <- lm(salary ~ sex * yrs.service, data = Salaries)
modelo_5 <- lm(salary ~ sex * yrs.since.phd, data = Salaries)
modelo_6 <- lm(salary ~ yrs.service * yrs.since.phd, data = Salaries)
# Comparar los modelos utilizando criterios de ajuste
modelos <- list(modelo_1, modelo_2, modelo_3, modelo_4, modelo_5, modelo_6)
criterios_ajuste <- c("AIC", "BIC", "R-squared", "Adjusted R-squared", "Cp_Mallows")
resultados <- data.frame(Modelo = 1:length(modelos))
for (i in 1:length(modelos)) {
modelo <- modelos[[i]]
resultados[i, "AIC"] <- AIC(modelo)
resultados[i, "BIC"] <- BIC(modelo)
resultados[i, "R-squared"] <- summary(modelo)$r.squared
resultados[i, "Adjusted R-squared"] <- summary(modelo)$adj.r.squared
}
# Mostrar los resultados
resultados
View(Salaries)
modelo_1 <- lm(salary ~ sex, data = Salaries)
modelo_2 <- lm(salary ~ yrs.service, data = Salaries)
modelo_3 <- lm(salary ~ sex + yrs.service, data = Salaries)
modelo_4 <- lm(salary ~ sex + yrs.since.phd, data = Salaries)
modelo_5 <- lm(salary ~ yrs.service + yrs.since.phd, data = Salaries)
modelo_6 <- lm(salary ~ sex * yrs.service, data = Salaries)
modelo_7 <- lm(salary ~ sex + rank, data = Salaries)
modelo_8 <- lm(salary ~ yrs.service + rank, data = Salaries)
modelo_9 <- lm(salary ~ sex * yrs.service + rank, data = Salaries)
# Comparar los modelos utilizando criterios de ajuste
modelos <- list(modelo_1, modelo_2, modelo_3, modelo_4, modelo_5, modelo_6, modelo_7, modelo_8, modelo_9)
criterios_ajuste <- c("AIC", "BIC", "R-squared", "Adjusted R-squared")
resultados <- data.frame(Modelo = 1:length(modelos))
for (i in 1:length(modelos)) {
modelo <- modelos[[i]]
resultados[i, "AIC"] <- AIC(modelo)
resultados[i, "BIC"] <- BIC(modelo)
resultados[i, "R-squared"] <- summary(modelo)$r.squared
resultados[i, "Adjusted R-squared"] <- summary(modelo)$adj.r.squared
}
# Mostrar los resultados
resultados
modelo_completo <- lm(salary ~ ., data = Salaries)
summary(modelo_completo)
modelo.completo <- lm(salary~rank+discipline+yrs.service+yrs.since.phd+sex+rank*discipline+rank*yrs.service+rank*yrs.since.phd+rank*sex
+discipline*yrs.service+discipline*yrs.since.phd+discipline*sex+yrs.service*yrs.since.phd+yrs.service*sex+yrs.since.phd*sex)
modelo.completo <- lm(salary~rank+discipline+yrs.service+yrs.since.phd+sex+rank*discipline+rank*yrs.service+rank*yrs.since.phd+rank*sex
+discipline*yrs.service+discipline*yrs.since.phd+discipline*sex+yrs.service*yrs.since.phd+yrs.service*sex+yrs.since.phd*sex, data=Salaries)
summary(modelo.completo)
best_model <- lm(salary~rank+discipline+discipline*yrs.service+discipline*yrs.since.phd, data = Salaries)
summary(best_model)
summary(modelo_completo)$r.square
summary(modelo.completo)$r.square
summary(best_model)$r.square
summary(modelo_completo)$r.squared
summary(modelo.completo)$r.squared
summary(best_model)$r.squared
overall_p <- function( my_model, nivel_significancia = 0.05 ) {
suppressMessages( require(lmtest) )
suppressMessages( require(car) )
#Shapiro Test
t_sha <- shapiro.test( my_model$residuals )
t_sha_obs <- ifelse( t_sha$p.value > nivel_significancia,
"Los residuos son normales.",
"Los residuos NO son normales.")
#BP Test
t_bp <- bptest( my_model )
t_bp_obs <- ifelse( unname(t_bp$p.value) > nivel_significancia,
"Homocedasticidad. La varianza de los residuos es constante.",
"Heterocedasticidad. La varianza de los residuos NO es constante.")
#Durbin-Watson Test
t_dwt <- dwt( my_model )
t_dwt_obs <- ifelse( t_dwt$dw > 1.5 && t_dwt$dw < 2.5,
"No hay autocorrelación. Los residuos son independientes.",
"Hay autocorrelación. Los residuos NO son independientes.")
resultados <- data.frame(
Prueba = c("Shapiro", "Breusch-Pagan", "Durbin-Watson"),
P_Value = c(t_sha$p.value, unname(t_bp$p.value), t_dwt$p)
)
resultados$Hipotesis <- ifelse( resultados$P_Value > nivel_significancia, "Aceptada", "Rechazada" )
resultados$Observaciones <- ifelse( resultados$Prueba == "Shapiro", t_sha_obs,
ifelse( resultados$Prueba == "Breusch-Pagan", t_bp_obs, t_dwt_obs ) )
return(resultados)
}
overall_p(modelo_completo)
overall_p(modelo.completo)
overall_p(best_model)
